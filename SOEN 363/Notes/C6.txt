SQL part 2
    
    SQL (structured)
        benefits:
            - has triggers and advanded ICs (trigger = actions taken whenever smth changes)
            - embedded and dynamic language (use another language to call SQL code | queries can be constructed at run time)
            - remote access
            - transaction management
            - security
        Basic form: C6_sqlBasic

        Symbols:
            - "%" --> 0 or more arbitary characters
            - "_" --> 1 arbitary character
            note: use the work "like" for this scenario
            ex: find students "ssn" who live on "main" ("main st" or "main str", etc)
                select ssn
                from student
                where address like 'main%'
            ex2: find ages of sailors whose names begin and end with "B" and has at least 3 characters
                select S.age
                from Sailors as S
                where S.sname like 'B_%B'
        
        Self-joins
            - renaming
            see ex: C6_selfjoins

SQL part 3

    set operations:
        - operation when checking same relation twice
        - use word: intesect (and) | union (or) | except (but not)
        see ex: C6_setOp for intersect example 
    
    Aggregation functions
        - find average grade accross all students
            select avg(grades)
            from take
        - other functions: Count([Distinct]A), Sum ([Distinct] A), Max(A), Min(A)
        - note: if aggregate func used, then ONLY aggregate function should be used unless "group by" clause
        ex: find total number of students in 15-415
            select count(*)
            from takes
            where c-id = '15-415'
        
        GROUP BY and HAVING clauses
            ex: find age of youngest sailor for each rating level
                since we don't know how many rating levels exist nor what rating values for these levels are
                we group them, where every column in "select" must appear in "group by"
                    select S.rating, min(S.age)
                    from Sailors S
                    group by S.rating

                if we say: age >= 18 for each rating level with at least 3 sailors
                    select S.rating, min(S.age) AS minage
                    from Sailors S 
                    where S.age >= 18
                    group by S.rating
                    having count (*) > 1
                    
SQL part 4
